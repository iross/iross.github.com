<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://iross.github.com/atom.xml" rel="self"/>
  <link href="http://iross.github.com/"/>
  <updated>2013-01-30T20:53:44-06:00</updated>
  <id>http://iross.github.com/</id>
  <author>
    <name><![CDATA[Ian Ross]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[code snippet]]></title>
    <link href="http://iross.github.com/blog/2013/01/30/code-snippet/"/>
    <updated>2013-01-30T20:51:00-06:00</updated>
    <id>http://iross.github.com/blog/2013/01/30/code-snippet</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>dumbClass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">ROOT</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">getopt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">RecoLuminosity.LumiDB</span> <span class="kn">import</span> <span class="n">argparse</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">combTrees</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">CommonSelectors</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Selector</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Skimmer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'><span class="err">    </span><span class="s">&quot;&quot;&quot;Skimmer class. Accepts TTree, cuts, etc, and sorts through them, returning unique and arbitrated event sets&quot;&quot;&quot;</span>
</span><span class='line'><span class="err">    </span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tree</span><span class="p">,</span> <span class="n">cuts</span><span class="p">,</span> <span class="n">arbMode</span><span class="p">,</span> <span class="nb">vars</span><span class="p">,</span> <span class="n">outTree</span><span class="p">,</span> <span class="n">allVars</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'><span class="err">        </span><span class="nb">super</span><span class="p">(</span><span class="n">Skimmer</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">tree</span> <span class="o">=</span> <span class="n">tree</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span> <span class="o">=</span> <span class="n">cuts</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">arbMode</span> <span class="o">=</span> <span class="n">arbMode</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">vars</span> <span class="o">=</span> <span class="nb">vars</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">outTree</span> <span class="o">=</span> <span class="n">outTree</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">allVars</span> <span class="o">=</span> <span class="n">allVars</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">events</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="err">    </span><span class="k">def</span> <span class="nf">setEvents</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="err">        </span><span class="s">&quot;&quot;&quot;Get event list&quot;&quot;&quot;</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">events</span><span class="o">=</span><span class="n">uniquify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tree</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">cuts</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">arbMode</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">vars</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">allVars</span><span class="p">)</span>
</span><span class='line'><span class="err">    </span><span class="k">def</span> <span class="nf">makeTree</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="err">        </span><span class="s">&quot;&quot;&quot;Return TTree composed of events&quot;&quot;&quot;</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="n">makeTree</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">events</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">outTree</span><span class="p">)</span>
</span><span class='line'><span class="err">    </span><span class="k">def</span> <span class="nf">clear</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="err">        </span><span class="s">&quot;&quot;&quot;Clear out event dict&quot;&quot;&quot;</span>
</span><span class='line'><span class="err">        </span><span class="bp">self</span><span class="o">.</span><span class="n">events</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#f=TFile(file,&quot;update&quot;)</span>
</span><span class='line'><span class="c">#t=f.Get(&quot;eleEleEleEleEventTree/eventTree&quot;)</span>
</span><span class='line'><span class="c">#cuts[&quot;eeee&quot;]=defineCuts(pt20_10.cuts(),z2ee.cuts(),z2RelPFIso.cuts(),&quot;fourFour&quot;,&quot;z2Charge==0&quot;)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[testtitle]]></title>
    <link href="http://iross.github.com/blog/2013/01/30/testtitle/"/>
    <updated>2013-01-30T20:43:00-06:00</updated>
    <id>http://iross.github.com/blog/2013/01/30/testtitle</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Test]]></title>
    <link href="http://iross.github.com/blog/2012/12/02/another-test/"/>
    <updated>2012-12-02T15:56:00-06:00</updated>
    <id>http://iross.github.com/blog/2012/12/02/another-test</id>
    <content type="html"><![CDATA[<p><a href="http://www.reddit.com">test link, please ignore</a></p>

<p><a href="http://www.fakeaddress.com">test to an unvisited site</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test]]></title>
    <link href="http://iross.github.com/blog/2012/12/02/test/"/>
    <updated>2012-12-02T15:49:00-06:00</updated>
    <id>http://iross.github.com/blog/2012/12/02/test</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TEST POST]]></title>
    <link href="http://iross.github.com/blog/2012/12/02/test-post/"/>
    <updated>2012-12-02T15:24:00-06:00</updated>
    <id>http://iross.github.com/blog/2012/12/02/test-post</id>
    <content type="html"><![CDATA[<h2>Another hot jam!</h2>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/OATi34PKNPw "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[soundcloud test]]></title>
    <link href="http://iross.github.com/blog/2012/10/28/soundcloud-test/"/>
    <updated>2012-10-28T16:47:00-05:00</updated>
    <id>http://iross.github.com/blog/2012/10/28/soundcloud-test</id>
    <content type="html"><![CDATA[<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F62838238&amp;"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[youtube test]]></title>
    <link href="http://iross.github.com/blog/2012/10/26/youtube-test/"/>
    <updated>2012-10-26T22:19:00-05:00</updated>
    <id>http://iross.github.com/blog/2012/10/26/youtube-test</id>
    <content type="html"><![CDATA[<h2>CHECK IT OUT</h2>

<p>This vid is rad to the max</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/YbvrM6Nj2Ok "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test post]]></title>
    <link href="http://iross.github.com/blog/2012/10/26/test-post/"/>
    <updated>2012-10-26T21:53:00-05:00</updated>
    <id>http://iross.github.com/blog/2012/10/26/test-post</id>
    <content type="html"><![CDATA[<h2>Whoa</h2>

<blockquote><p>markdown.</p></blockquote>

<p><em>how does this work?</em></p>
]]></content>
  </entry>
  
</feed>
